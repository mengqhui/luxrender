<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGUID>{C50C5AA0-6F77-4F90-8C4A-E82BE0625E4C}</ProjectGUID>
    <Keyword>Win32Proj</Keyword>
    <Platform>x64</Platform>
    <ProjectName>smallluxgpu</ProjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">smallluxgpu.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">smallluxgpu</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">smallluxgpu.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">smallluxgpu</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">smallluxgpu.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">smallluxgpu</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">smallluxgpu.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">smallluxgpu</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.lib</TargetExt>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Debug/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;DISABLED_DEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="Debug";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;DISABLED_DEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"Debug\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalOptions> /Qfast_transcendentals %(AdditionalOptions)</AdditionalOptions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Release/</AssemblerListingLocation>
      <BufferSecurityCheck>true</BufferSecurityCheck>
      <CallingConvention>Cdecl</CallingConvention>
      <CompileAs>CompileAsCpp</CompileAs>
      <DisableSpecificWarnings>4244;4756;4267;4056;4305;4800</DisableSpecificWarnings>
      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FloatingPointModel>Precise</FloatingPointModel>
      <ForceConformanceInForLoopScope>true</ForceConformanceInForLoopScope>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <MinimalRebuild>false</MinimalRebuild>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>true</OmitFramePointers>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWChar_tAsBuiltInType>true</TreatWChar_tAsBuiltInType>
      <TreatWarningAsError>false</TreatWarningAsError>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <WholeProgramOptimization>true</WholeProgramOptimization>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="Release";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"Release\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>MinSizeRel/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="MinSizeRel";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"MinSizeRel\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalOptions> /Qfast_transcendentals %(AdditionalOptions)</AdditionalOptions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>RelWithDebInfo/</AssemblerListingLocation>
      <BufferSecurityCheck>true</BufferSecurityCheck>
      <CallingConvention>Cdecl</CallingConvention>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <DisableSpecificWarnings>4244;4756;4267;4056;4305;4800</DisableSpecificWarnings>
      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FloatingPointModel>Precise</FloatingPointModel>
      <ForceConformanceInForLoopScope>true</ForceConformanceInForLoopScope>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <MinimalRebuild>false</MinimalRebuild>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>true</OmitFramePointers>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Full</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWChar_tAsBuiltInType>true</TreatWChar_tAsBuiltInType>
      <TreatWarningAsError>false</TreatWarningAsError>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <WholeProgramOptimization>true</WholeProgramOptimization>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="RelWithDebInfo";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"RelWithDebInfo\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
    </Lib>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\samplers\sampler_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_types.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\samplers\sampler_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampler_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampler_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/samplers/sampler_funcs.cl;D:\luxrender\luxrays\include\slg\samplers\sampler_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\sampler_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\film_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/film_types.cl;D:\luxrender\luxrays\include\slg\film\film_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\film_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/film_types.cl;D:\luxrender\luxrays\include\slg\film\film_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\film_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/film_types.cl;D:\luxrender\luxrays\include\slg\film\film_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\film_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/film_types.cl;D:\luxrender\luxrays\include\slg\film\film_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\film_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\film_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/film_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\film_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/film_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\film_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/film_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\film_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/film_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\film_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\film_mergesamplebuffer_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_mergesamplebuffer_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_mergesamplebuffer_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\film_mergesamplebuffer_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_mergesamplebuffer_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_mergesamplebuffer_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\film_mergesamplebuffer_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_mergesamplebuffer_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_mergesamplebuffer_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\film_mergesamplebuffer_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_film_mergesamplebuffer_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/film_mergesamplebuffer_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/film_mergesamplebuffer_funcs.cl;D:\luxrender\luxrays\include\slg\film\film_mergesamplebuffer_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\film_mergesamplebuffer_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_backgroundimg_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_backgroundimg_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_backgroundimg_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_backgroundimg_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_backgroundimg_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_backgroundimg_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_backgroundimg_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_backgroundimg_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_backgroundimg_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_backgroundimg_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_backgroundimg_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_backgroundimg_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_backgroundimg_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_backgroundimg_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_backgroundimg_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_bloom_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_bloom_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_bloom_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_bloom_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_bloom_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_bloom_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_bloom_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_bloom_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_bloom_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_bloom_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_bloom_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_bloom_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_bloom_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_bloom_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_bloom_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_cameraresponse_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_cameraresponse_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_cameraresponse_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_cameraresponse_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_cameraresponse_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_cameraresponse_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_cameraresponse_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_cameraresponse_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_cameraresponse_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_cameraresponse_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_cameraresponse_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_cameraresponse_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_cameraresponse_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_cameraresponse_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_cameraresponse_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_coloraberration_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_coloraberration_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_coloraberration_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_coloraberration_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_coloraberration_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_coloraberration_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_coloraberration_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_coloraberration_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_coloraberration_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_coloraberration_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_coloraberration_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_coloraberration_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_coloraberration_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_coloraberration_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_coloraberration_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gammacorrection_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gammacorrection_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gammacorrection_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gammacorrection_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gammacorrection_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gammacorrection_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gammacorrection_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gammacorrection_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gammacorrection_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gammacorrection_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gammacorrection_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gammacorrection_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gammacorrection_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gammacorrection_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gammacorrection_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gaussianblur3x3_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gaussianblur3x3_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gaussianblur3x3_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gaussianblur3x3_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gaussianblur3x3_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gaussianblur3x3_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gaussianblur3x3_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gaussianblur3x3_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gaussianblur3x3_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gaussianblur3x3_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_gaussianblur3x3_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_gaussianblur3x3_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_gaussianblur3x3_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_gaussianblur3x3_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_gaussianblur3x3_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_objectidmask_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_objectidmask_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_objectidmask_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_objectidmask_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_objectidmask_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_objectidmask_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_objectidmask_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_objectidmask_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_objectidmask_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_objectidmask_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_objectidmask_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_objectidmask_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_objectidmask_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_objectidmask_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_objectidmask_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_vignetting_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_vignetting_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_vignetting_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_vignetting_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_vignetting_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_vignetting_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_vignetting_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_vignetting_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_vignetting_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_vignetting_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_vignetting_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_vignetting_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_vignetting_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_vignetting_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_vignetting_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_premultiplyalpha_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_premultiplyalpha_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_premultiplyalpha_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_premultiplyalpha_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_premultiplyalpha_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_premultiplyalpha_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_premultiplyalpha_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_premultiplyalpha_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_premultiplyalpha_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_premultiplyalpha_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_plugin_premultiplyalpha_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/plugin_premultiplyalpha_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/plugin_premultiplyalpha_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\plugin_premultiplyalpha_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\plugin_premultiplyalpha_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reduce_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reduce_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reduce_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reduce_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reduce_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reduce_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reduce_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reduce_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reduce_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reduce_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reduce_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reduce_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reduce_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reduce_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reduce_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_autolinear_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_autolinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_autolinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_autolinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_autolinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_autolinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_autolinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_autolinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_autolinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_autolinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_autolinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_autolinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_autolinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_autolinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_autolinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_linear_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_linear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_linear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_linear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_linear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_linear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_linear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_linear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_linear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_linear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_linear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_linear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_linear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_linear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_linear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_luxlinear_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_luxlinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_luxlinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_luxlinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_luxlinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_luxlinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_luxlinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_luxlinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_luxlinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_luxlinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_luxlinear_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_luxlinear_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_luxlinear_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_luxlinear_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_luxlinear_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reinhard02_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reinhard02_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reinhard02_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reinhard02_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reinhard02_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reinhard02_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reinhard02_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reinhard02_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reinhard02_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reinhard02_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_tonemap_reinhard02_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/tonemap_reinhard02_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/imagepipeline/plugins/tonemaps/tonemap_reinhard02_funcs.cl;D:\luxrender\luxrays\include\slg\film\imagepipeline\plugins\tonemaps\tonemap_reinhard02_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\tonemap_reinhard02_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\sampleresult_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\film\sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\film\sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\film\sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\film\sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\filters\filter_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_types.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\film\filters\filter_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_filter_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/filter_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/film/filters/filter_funcs.cl;D:\luxrender\luxrays\include\slg\film\filters\filter_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\filter_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\cameras\camera_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_types.cl;D:\luxrender\luxrays\include\slg\cameras\camera_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_types.cl;D:\luxrender\luxrays\include\slg\cameras\camera_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_types.cl;D:\luxrender\luxrays\include\slg\cameras\camera_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_types.cl;D:\luxrender\luxrays\include\slg\cameras\camera_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\cameras\camera_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl;D:\luxrender\luxrays\include\slg\cameras\camera_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl;D:\luxrender\luxrays\include\slg\cameras\camera_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl;D:\luxrender\luxrays\include\slg\cameras\camera_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_camera_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/camera_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/cameras/camera_funcs.cl;D:\luxrender\luxrays\include\slg\cameras\camera_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\camera_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\bsdf\bsdf_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_types.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\bsdf\bsdf_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdf_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdf_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdf_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdf_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdf_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\bsdf\bsdfutils_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdfutils_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdfutils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdfutils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdfutils_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdfutils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdfutils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdfutils_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdfutils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdfutils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bsdfutils_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/bsdfutils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/bsdf/bsdfutils_funcs.cl;D:\luxrender\luxrays\include\slg\bsdf\bsdfutils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\bsdfutils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\imagemap\imagemap_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_types.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\imagemap\imagemap_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_imagemap_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/imagemap_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/imagemap/imagemap_funcs.cl;D:\luxrender\luxrays\include\slg\imagemap\imagemap_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\imagemap_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\material_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/material_types.cl;D:\luxrender\luxrays\include\slg\materials\material_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\material_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/material_types.cl;D:\luxrender\luxrays\include\slg\materials\material_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\material_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/material_types.cl;D:\luxrender\luxrays\include\slg\materials\material_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\material_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/material_types.cl;D:\luxrender\luxrays\include\slg\materials\material_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\material_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_generic.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_generic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_generic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_generic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_generic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_generic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_generic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_generic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_generic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_generic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_generic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_generic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_generic.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_generic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_generic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_default.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_default = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_default.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_default_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_default = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_default.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_default_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_default = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_default.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_default_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_default = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_default_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_default.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_default.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_default_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_archglass.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_archglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_archglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_archglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_archglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_archglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_archglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_archglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_archglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_archglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_archglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_archglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_archglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_archglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_archglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_carpaint.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_carpaint = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_carpaint.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_carpaint_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_carpaint = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_carpaint.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_carpaint_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_carpaint = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_carpaint.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_carpaint_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_carpaint = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_carpaint_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_carpaint.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_carpaint.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_carpaint_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_clearvol.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_clearvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_clearvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_clearvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_clearvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_clearvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_clearvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_clearvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_clearvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_clearvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_clearvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_clearvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_clearvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_clearvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_clearvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_cloth.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_cloth = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_cloth.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_cloth_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_cloth = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_cloth.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_cloth_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_cloth = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_cloth.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_cloth_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_cloth = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_cloth_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_cloth.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_cloth.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_cloth_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glass.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossy2.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossy2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossy2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossy2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossy2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossy2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossy2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossy2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossy2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossy2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossy2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossy2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossy2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossy2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossy2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossytranslucent.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossytranslucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossytranslucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossytranslucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossytranslucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossytranslucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossytranslucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossytranslucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossytranslucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossytranslucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_glossytranslucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_glossytranslucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_glossytranslucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_glossytranslucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossytranslucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_heterogeneousvol.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_heterogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_heterogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_heterogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_heterogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_heterogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_heterogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_heterogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_heterogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_heterogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_heterogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_heterogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_heterogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_heterogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_heterogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_homogeneousvol.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_homogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_homogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_homogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_homogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_homogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_homogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_homogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_homogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_homogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_homogeneousvol = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_homogeneousvol_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_homogeneousvol.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_homogeneousvol.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_homogeneousvol_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte_translucent.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_matte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_matte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_matte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_matte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_metal2.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_metal2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_metal2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_metal2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_metal2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_metal2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_metal2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_metal2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_metal2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_metal2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_metal2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_metal2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_metal2.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_metal2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_metal2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_mirror.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_mirror = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_mirror.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_mirror_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_mirror = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_mirror.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_mirror_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_mirror = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_mirror.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_mirror_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_mirror = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_mirror_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_mirror.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_mirror.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_mirror_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_null.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_null = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_null.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_null_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_null = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_null.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_null_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_null = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_null.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_null_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_null = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_null_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_null.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_null.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_null_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughglass.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughglass = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughglass_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughglass.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughglass.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughglass_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughmatte_translucent.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughmatte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughmatte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughmatte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughmatte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughmatte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughmatte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughmatte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughmatte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughmatte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_roughmatte_translucent = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_roughmatte_translucent_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_roughmatte_translucent.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_roughmatte_translucent.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughmatte_translucent_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_velvet.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_velvet = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_velvet.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_velvet_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_velvet = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_velvet.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_velvet_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_velvet = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_velvet.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_velvet_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_funcs_velvet = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_funcs_velvet_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_funcs_velvet.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_funcs_velvet.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_velvet_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_template_glossycoating.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_glossycoating = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_glossycoating.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_glossycoating_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_glossycoating = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_glossycoating.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_glossycoating_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_glossycoating = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_glossycoating.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_glossycoating_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_glossycoating = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_glossycoating_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_glossycoating.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_glossycoating.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_glossycoating_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\materialdefs_template_mix.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_mix = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_mix.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_mix_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_mix = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_mix.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_mix_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_mix = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_mix.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_mix_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_materialdefs_template_mix = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/materialdefs_template_mix_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/materialdefs_template_mix.cl;D:\luxrender\luxrays\include\slg\materials\materialdefs_template_mix.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_mix_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\material_main_withoutdynamic.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main_withoutdynamic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl;D:\luxrender\luxrays\include\slg\materials\material_main_withoutdynamic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_withoutdynamic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main_withoutdynamic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl;D:\luxrender\luxrays\include\slg\materials\material_main_withoutdynamic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_withoutdynamic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main_withoutdynamic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl;D:\luxrender\luxrays\include\slg\materials\material_main_withoutdynamic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_withoutdynamic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main_withoutdynamic = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_withoutdynamic_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/material_main_withoutdynamic.cl;D:\luxrender\luxrays\include\slg\materials\material_main_withoutdynamic.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_withoutdynamic_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\materials\material_main.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/materials/material_main.cl;D:\luxrender\luxrays\include\slg\materials\material_main.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/materials/material_main.cl;D:\luxrender\luxrays\include\slg\materials\material_main.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/materials/material_main.cl;D:\luxrender\luxrays\include\slg\materials\material_main.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_material_main = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/materials/material_main.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/material_main_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/materials/material_main.cl;D:\luxrender\luxrays\include\slg\materials\material_main.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\material_main_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_types.cl;D:\luxrender\luxrays\include\slg\textures\texture_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_types.cl;D:\luxrender\luxrays\include\slg\textures\texture_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_types.cl;D:\luxrender\luxrays\include\slg\textures\texture_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_types.cl;D:\luxrender\luxrays\include\slg\textures\texture_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs2.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_noise_funcs2 = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_noise_funcs2_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_noise_funcs2.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_noise_funcs2.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs2_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_blender_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blender_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blender_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blender_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blender_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blender_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_bump_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bump_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bump_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bump_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bump_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bump_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bump_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bump_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bump_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bump_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bump_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bump_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bump_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bump_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bump_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_noise_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_noise_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_noise_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_noise_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_noise_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_noise_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_abs_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_abs_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_abs_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_abs_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_abs_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_abs_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_abs_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_abs_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_abs_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_abs_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_abs_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_abs_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_abs_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_abs_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_abs_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_bilerp_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bilerp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bilerp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bilerp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bilerp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bilerp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bilerp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bilerp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bilerp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bilerp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_bilerp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_bilerp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_bilerp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_bilerp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_bilerp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_blackbody_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blackbody_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blackbody_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blackbody_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blackbody_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blackbody_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blackbody_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blackbody_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blackbody_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blackbody_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_blackbody_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_blackbody_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_blackbody_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_blackbody_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_blackbody_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_clamp_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_clamp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_clamp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_clamp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_clamp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_clamp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_clamp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_clamp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_clamp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_clamp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_clamp_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_clamp_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_clamp_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_clamp_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_clamp_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_colordepth_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_colordepth_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_colordepth_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_colordepth_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_colordepth_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_colordepth_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_colordepth_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_colordepth_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_colordepth_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_colordepth_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_colordepth_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_colordepth_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_colordepth_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_colordepth_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_colordepth_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelcolor_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelcolor_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelcolor_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelcolor_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelcolor_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelcolor_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelcolor_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelcolor_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelcolor_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelcolor_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelcolor_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelcolor_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelcolor_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelcolor_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelcolor_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelconst_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelconst_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelconst_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelconst_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelconst_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelconst_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelconst_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelconst_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelconst_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelconst_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_fresnelconst_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_fresnelconst_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/fresnel/texture_fresnelconst_funcs.cl;D:\luxrender\luxrays\include\slg\textures\fresnel\texture_fresnelconst_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_fresnelconst_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_hsv_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_hsv_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_hsv_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_hsv_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_hsv_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_hsv_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_hsv_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_hsv_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_hsv_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_hsv_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_hsv_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_hsv_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_hsv_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_hsv_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_hsv_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\texture_irregulardata_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_irregulardata_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_irregulardata_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_irregulardata_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_irregulardata_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_irregulardata_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_irregulardata_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_irregulardata_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_irregulardata_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_irregulardata_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_texture_irregulardata_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/texture_irregulardata_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/texture_irregulardata_funcs.cl;D:\luxrender\luxrays\include\slg\textures\texture_irregulardata_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\texture_irregulardata_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\utils\varianceclamping_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_varianceclamping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl;D:\luxrender\luxrays\include\slg\utils\varianceclamping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\varianceclamping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_varianceclamping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl;D:\luxrender\luxrays\include\slg\utils\varianceclamping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\varianceclamping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_varianceclamping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl;D:\luxrender\luxrays\include\slg\utils\varianceclamping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\varianceclamping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_varianceclamping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/varianceclamping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/utils/varianceclamping_funcs.cl;D:\luxrender\luxrays\include\slg\utils\varianceclamping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\varianceclamping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\volumes\volume_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_types.cl;D:\luxrender\luxrays\include\slg\volumes\volume_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_types.cl;D:\luxrender\luxrays\include\slg\volumes\volume_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_types.cl;D:\luxrender\luxrays\include\slg\volumes\volume_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_types.cl;D:\luxrender\luxrays\include\slg\volumes\volume_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\volumes\volume_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volume_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volume_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volume_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volume_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volume_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/volumes/volume_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volume_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\volume_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\volumes\volumeinfo_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volumeinfo_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volumeinfo_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\volumeinfo_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volumeinfo_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volumeinfo_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\volumeinfo_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volumeinfo_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volumeinfo_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\volumeinfo_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_volumeinfo_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/volumeinfo_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/volumes/volumeinfo_funcs.cl;D:\luxrender\luxrays\include\slg\volumes\volumeinfo_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\volumeinfo_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\lights\light_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/lights/light_types.cl;D:\luxrender\luxrays\include\slg\lights\light_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\light_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/lights/light_types.cl;D:\luxrender\luxrays\include\slg\lights\light_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\light_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/lights/light_types.cl;D:\luxrender\luxrays\include\slg\lights\light_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\light_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/lights/light_types.cl;D:\luxrender\luxrays\include\slg\lights\light_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\light_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\lights\light_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/lights/light_funcs.cl;D:\luxrender\luxrays\include\slg\lights\light_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\light_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/lights/light_funcs.cl;D:\luxrender\luxrays\include\slg\lights\light_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\light_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/lights/light_funcs.cl;D:\luxrender\luxrays\include\slg\lights\light_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\light_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_light_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/lights/light_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/light_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/lights/light_funcs.cl;D:\luxrender\luxrays\include\slg\lights\light_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\light_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\scene\scene_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_scene_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl;D:\luxrender\luxrays\include\slg\scene\scene_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\scene_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_scene_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl;D:\luxrender\luxrays\include\slg\scene\scene_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\scene_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_scene_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl;D:\luxrender\luxrays\include\slg\scene\scene_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\scene_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_scene_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/scene_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/scene/scene_funcs.cl;D:\luxrender\luxrays\include\slg\scene\scene_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\scene_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\scene\sceneobject_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sceneobject_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl;D:\luxrender\luxrays\include\slg\scene\sceneobject_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\sceneobject_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sceneobject_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl;D:\luxrender\luxrays\include\slg\scene\sceneobject_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\sceneobject_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sceneobject_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl;D:\luxrender\luxrays\include\slg\scene\sceneobject_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\sceneobject_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_sceneobject_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/sceneobject_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/scene/sceneobject_types.cl;D:\luxrender\luxrays\include\slg\scene\sceneobject_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\sceneobject_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\mapping\mapping_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_types.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\textures\mapping\mapping_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mapping_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/mapping_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/textures/mapping/mapping_funcs.cl;D:\luxrender\luxrays\include\slg\textures\mapping\mapping_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\mapping_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\bsdf\hitpoint_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_hitpoint_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl;D:\luxrender\luxrays\include\slg\bsdf\hitpoint_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\hitpoint_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_hitpoint_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl;D:\luxrender\luxrays\include\slg\bsdf\hitpoint_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\hitpoint_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_hitpoint_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl;D:\luxrender\luxrays\include\slg\bsdf\hitpoint_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\hitpoint_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_hitpoint_types = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/hitpoint_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/bsdf/hitpoint_types.cl;D:\luxrender\luxrays\include\slg\bsdf\hitpoint_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\hitpoint_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\pathoclbase\pathoclbase_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathoclbase_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathoclbase\pathoclbase_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\pathoclbase_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathoclbase_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathoclbase\pathoclbase_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\pathoclbase_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathoclbase_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathoclbase\pathoclbase_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\pathoclbase_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathoclbase_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathoclbase_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/pathoclbase/pathoclbase_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathoclbase\pathoclbase_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\pathoclbase_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_datatypes.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_kernels_micro.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_pathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/pathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/pathocl/kernels/pathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\pathocl\kernels\pathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\pathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_datatypes.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_datatypes = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_datatypes_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_datatypes.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_datatypes.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_datatypes_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_sampleresult_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_sampleresult_funcs = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_sampleresult_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_sampleresult_funcs.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_sampleresult_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_sampleresult_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_common.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_common = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_common.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_common_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_common = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_common.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_common_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_common = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_common.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_common_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_common = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_common_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_common.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_common.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_common_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_micro.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace slg { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_biaspathocl_kernels_micro = &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/slg/kernels/biaspathocl_kernels_micro_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/slg/engines/biaspathocl/kernels/biaspathocl_kernels_micro.cl;D:\luxrender\luxrays\include\slg\engines\biaspathocl\kernels\biaspathocl_kernels_micro.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_micro_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="D:\luxrender\luxrays\src\slg\bsdf\bsdf.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\cameras\camera.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\cameras\orthographic.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\cameras\perspective.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\cameras\projective.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\cameras\stereo.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\core\namedobject.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\core\sdl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\core\sphericalfunction\sphericalfunction.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\core\sphericalfunction\photometricdataies.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\renderengine.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\cpurenderengine.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\oclrenderengine.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\tilerepository.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\bidircpu\bidircpu.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\bidircpu\bidircputhread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\bidirvmcpu\bidirvmcpu.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\bidirvmcpu\bidirvmcputhread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\bidirvmcpu\hashgrid.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compiledscene.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compilecamera.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compilegeometry.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compileimagemaps.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compilelights.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compilematerials.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compilesceneobjects.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\compiletextures.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\pathoclbase.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathoclbase\pathoclbasethread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathocl\pathocl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathocl\pathoclthread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\rtpathocl\rtpathocl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\rtpathocl\rtpathoclthread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\lightcpu\lightcpu.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\lightcpu\lightcputhread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathcpu\pathcpu.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\pathcpu\pathcputhread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\filesaver\filesaver.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\biaspathcpu\biaspathcpu.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\biaspathcpu\biaspathcputhread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\biaspathocl\biaspathocl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\biaspathocl\biaspathoclthread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\rtbiaspathocl\rtbiaspathocl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\engines\rtbiaspathocl\rtbiaspathoclthread.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\film.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmocl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmoutput.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmoutputs.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmparse.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmsamplesplatter.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmserialize.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filmtoproperties.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\radiancechannelscale.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\sampleresult.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\filter.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\filterdistribution.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\none.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\box.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\gaussian.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\mitchell.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\mitchellss.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\filters\blackmanharris.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\imagepipeline.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\backgroundimg.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\bloom.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\cameraresponse.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\coloraberration.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\contourlines.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\gammacorrection.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\gaussianblur3x3.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\nop.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\objectidmask.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\outputswitcher.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\vignetting.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\premultiplyalpha.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\tonemaps\autolinear.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\tonemaps\linear.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\tonemaps\luxlinear.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\tonemaps\reinhard02.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\film\imagepipeline\plugins\tonemaps\tonemap.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\imagemap\imagemap.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\imagemap\imagemapcache.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\constantinfinitelight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\distantlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\infinitelight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\laserlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\light.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\lightsourcedefinitions.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\lightstrategy.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\mappointlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\pointlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\projectionlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\sharpdistantlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\sky2light.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\skylight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\spotlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\sunlight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\lights\trianglelight.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\archglass.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\carpaint.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\cloth.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\glass.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\glossy2.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\glossycoatting.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\glossytranslucent.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\material.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\materialdefs.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\matte.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\mattetranslucent.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\metal2.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\mirror.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\mixmat.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\null.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\roughglass.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\roughmatte.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\roughmattetranslucent.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\materials\velvet.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\rendersession.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\renderconfig.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\samplers\sampler.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\samplers\random.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\samplers\sobol.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\samplers\soboldata.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\samplers\metropolis.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\extmeshcache.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parsecamera.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parselights.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parsematerials.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parseobjects.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parseshapes.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parsetextures.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\parsevolumes.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\sceneobject.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\scene\scene.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\shapes\shape.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\shapes\meshshape.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\shapes\pointiness.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\shapes\strands.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\mapping\mapping.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\abs.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\add.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\band.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\bilerp.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\blackbody.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\blender_noiselib.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\blender_texture.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\brick.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\checkerboard.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\clamp.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\colordepth.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\constfloat.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\constfloat3.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\cloud.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\dots.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\densitygrid.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fbm.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnelapprox.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresnelcauchy.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresnelcolor.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresnelconst.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresnelluxpop.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresnelpreset.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresnelsopra.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\fresnel\fresneltexture.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\hitpoint.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\hsv.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\imagemaptex.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\irregulardata.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\lampspectrum.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\marble.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\mixtex.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\normalmap.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\scale.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\subtract.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\texture.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\texturedefs.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\windy.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\wrinkled.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\textures\uv.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\utils\convtest\pdiff\lpyramid.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\utils\convtest\pdiff\metric.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\utils\convtest\convtest.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\utils\varianceclamping.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\volumes\clear.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\volumes\heterogenous.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\volumes\homogenous.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\volumes\volume.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\sampler_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\sampler_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\film_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\film_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\film_mergesamplebuffer_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_backgroundimg_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_bloom_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_cameraresponse_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_coloraberration_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_gammacorrection_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_gaussianblur3x3_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_objectidmask_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_vignetting_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\plugin_premultiplyalpha_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\tonemap_reduce_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\tonemap_autolinear_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\tonemap_linear_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\tonemap_luxlinear_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\tonemap_reinhard02_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\sampleresult_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\filter_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\filter_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\camera_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\camera_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\bsdf_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\bsdf_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\bsdfutils_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\imagemap_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\imagemap_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\material_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_generic_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_default_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_archglass_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_carpaint_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_clearvol_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_cloth_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glass_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossy2_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_glossytranslucent_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_heterogeneousvol_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_homogeneousvol_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_matte_translucent_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_metal2_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_mirror_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_null_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughglass_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_roughmatte_translucent_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_funcs_velvet_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_glossycoating_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\materialdefs_template_mix_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\material_main_withoutdynamic_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\material_main_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_blender_noise_funcs2_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_blender_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_bump_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_noise_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_abs_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_bilerp_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_blackbody_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_clamp_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_colordepth_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_fresnelcolor_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_fresnelconst_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_hsv_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\texture_irregulardata_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\varianceclamping_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\volume_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\volume_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\volumeinfo_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\light_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\light_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\scene_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\sceneobject_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\mapping_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\mapping_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\hitpoint_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\pathoclbase_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\pathocl_datatypes_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\pathocl_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\pathocl_kernels_micro_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\biaspathocl_datatypes_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\biaspathocl_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\biaspathocl_sampleresult_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_common_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\slg\kernels\biaspathocl_kernels_micro_kernel.cpp" />
  </ItemGroup>
  <ItemGroup>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>