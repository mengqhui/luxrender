<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGUID>{8761CA6A-D590-484E-87B3-AACAE1265DC4}</ProjectGUID>
    <Keyword>Win32Proj</Keyword>
    <Platform>x64</Platform>
    <ProjectName>luxrays</ProjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>StaticLibrary</ConfigurationType>
    <UseOfMfc>false</UseOfMfc>
    <CharacterSet>Unicode</CharacterSet>
    <PlatformToolset>v120_xp</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">luxrays.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">luxrays</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">luxrays.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">luxrays</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">luxrays.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">luxrays</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.lib</TargetExt>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\windows\Build_CMake\LuxRays\lib\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">luxrays.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">luxrays</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.lib</TargetExt>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Debug/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <PreprocessorDefinitions>WIN32;_WINDOWS;DISABLED_DEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="Debug";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;DISABLED_DEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"Debug\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalOptions> /Qfast_transcendentals %(AdditionalOptions)</AdditionalOptions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>Release/</AssemblerListingLocation>
      <BufferSecurityCheck>true</BufferSecurityCheck>
      <CallingConvention>Cdecl</CallingConvention>
      <CompileAs>CompileAsCpp</CompileAs>
      <DisableSpecificWarnings>4244;4756;4267;4056;4305;4800</DisableSpecificWarnings>
      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FloatingPointModel>Precise</FloatingPointModel>
      <ForceConformanceInForLoopScope>true</ForceConformanceInForLoopScope>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <MinimalRebuild>false</MinimalRebuild>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>true</OmitFramePointers>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWChar_tAsBuiltInType>true</TreatWChar_tAsBuiltInType>
      <TreatWarningAsError>false</TreatWarningAsError>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <WholeProgramOptimization>true</WholeProgramOptimization>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="Release";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"Release\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
    </Lib>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>MinSizeRel/</AssemblerListingLocation>
      <CompileAs>CompileAsCpp</CompileAs>
      <ExceptionHandling>Sync</ExceptionHandling>
      <InlineFunctionExpansion>OnlyExplicitInline</InlineFunctionExpansion>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="MinSizeRel";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"MinSizeRel\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalOptions> /Qfast_transcendentals %(AdditionalOptions)</AdditionalOptions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AssemblerListingLocation>RelWithDebInfo/</AssemblerListingLocation>
      <BufferSecurityCheck>true</BufferSecurityCheck>
      <CallingConvention>Cdecl</CallingConvention>
      <CompileAs>CompileAsCpp</CompileAs>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <DisableSpecificWarnings>4244;4756;4267;4056;4305;4800</DisableSpecificWarnings>
      <EnableFiberSafeOptimizations>true</EnableFiberSafeOptimizations>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FloatingPointModel>Precise</FloatingPointModel>
      <ForceConformanceInForLoopScope>true</ForceConformanceInForLoopScope>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <MinimalRebuild>false</MinimalRebuild>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>true</OmitFramePointers>
      <OpenMPSupport>true</OpenMPSupport>
      <Optimization>Full</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDLL</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWChar_tAsBuiltInType>true</TreatWChar_tAsBuiltInType>
      <TreatWarningAsError>false</TreatWarningAsError>
      <WarningLevel>TurnOffAllWarnings</WarningLevel>
      <WholeProgramOptimization>true</WholeProgramOptimization>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR="RelWithDebInfo";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>WIN32;_WINDOWS;NDEBUG;WIN32_LEAN_AND_MEAN;NOMINMAX;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_UNICODE;__SSE2__;__SSE__;__MMX__;BOOST_ALL_NO_LIB;FREEIMAGE_LIB;FREEGLUT_STATIC;GLEW_STATIC;BOOST_FILESYSTEM_NO_DEPRECATED;BOOST_STATIC_LIB;BOOST_PYTHON_STATIC_LIB;CMAKE_INTDIR=\"RelWithDebInfo\";%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>D:\luxrender\windows_deps\include;D:\Cuda\include;D:\luxrender\windows_deps\include\Boost;D:\luxrender\windows_deps\include\OpenEXR;D:\luxrender\windows_deps\include\OpenImageIO;D:\luxrender\luxrays\include;D:\luxrender\windows_deps\include\Python3;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Lib>
      <LinkTimeCodeGeneration>true</LinkTimeCodeGeneration>
    </Lib>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\luxrays_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_luxrays_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/luxrays_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/luxrays_types.cl;D:\luxrender\luxrays\include\luxrays\luxrays_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\luxrays_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_luxrays_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/luxrays_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/luxrays_types.cl;D:\luxrender\luxrays\include\luxrays\luxrays_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\luxrays_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_luxrays_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/luxrays_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/luxrays_types.cl;D:\luxrender\luxrays\include\luxrays\luxrays_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\luxrays_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_luxrays_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/luxrays_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/luxrays_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/luxrays_types.cl;D:\luxrender\luxrays\include\luxrays\luxrays_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\luxrays_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\accelerators\bvh_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\accelerators\bvh.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/bvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\bvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\accelerators\mbvh.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\accelerators\qbvh_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh_types.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\accelerators\qbvh.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_qbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/qbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/qbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\qbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\qbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\accelerators\mqbvh.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mqbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mqbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mqbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mqbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mqbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mqbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mqbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mqbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mqbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mqbvh = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mqbvh_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/accelerators/mqbvh.cl;D:\luxrender\luxrays\include\luxrays\accelerators\mqbvh.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mqbvh_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\randomgen_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_types.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\randomgen_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_randomgen_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/randomgen_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/randomgen_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\randomgen_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\randomgen_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\trianglemesh_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_types.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\trianglemesh_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_trianglemesh_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/trianglemesh_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/trianglemesh_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\trianglemesh_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_matrix4x4_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/matrix4x4_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/matrix4x4_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\matrix4x4_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\transform_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\transform_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_transform_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/transform_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/transform_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\transform_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\transform_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\frame_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\frame_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_frame_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/frame_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/frame_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\frame_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\frame_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\epsilon_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_types.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\epsilon_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_epsilon_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/epsilon_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/epsilon_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\epsilon_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\epsilon_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\ray_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\ray_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_ray_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/ray_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/ray_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\ray_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\ray_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\point_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_point_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\point_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\point_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_point_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\point_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\point_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_point_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\point_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\point_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_point_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/point_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/point_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\point_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\point_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\vector_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\vector_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_vector_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/vector_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/vector_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\vector_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\vector_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\normal_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_normal_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\normal_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\normal_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_normal_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\normal_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\normal_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_normal_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\normal_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\normal_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_normal_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/normal_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/normal_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\normal_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\normal_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_quaternion_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/quaternion_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/quaternion_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\quaternion_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\quaternion_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_bbox_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/bbox_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/bbox_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\bbox_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\bbox_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_motionsystem_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/motionsystem_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/motionsystem_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\motionsystem_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_triangle_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/triangle_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/triangle_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\triangle_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\triangle_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\color\color_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_types.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\color\color_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_color_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/color_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/color/color_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\color\color_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\color_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\geometry\uv_types.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_uv_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\uv_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\uv_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_uv_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\uv_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\uv_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_uv_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\uv_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\uv_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_uv_types = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/uv_types_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/geometry/uv_types.cl;D:\luxrender\luxrays\include\luxrays\core\geometry\uv_types.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\uv_types_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\utils\mc_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mc_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl;D:\luxrender\luxrays\include\luxrays\utils\mc_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mc_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mc_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl;D:\luxrender\luxrays\include\luxrays\utils\mc_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mc_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mc_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl;D:\luxrender\luxrays\include\luxrays\utils\mc_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mc_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_mc_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/mc_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/utils/mc_funcs.cl;D:\luxrender\luxrays\include\luxrays\utils\mc_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\mc_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <CustomBuild Include="D:\luxrender\luxrays\include\luxrays\core\utils_funcs.cl">
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_utils_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\utils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">D:\luxrender\luxrays\src\luxrays\kernels\utils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_utils_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\utils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">D:\luxrender\luxrays\src\luxrays\kernels\utils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_utils_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\utils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">D:\luxrender\luxrays\src\luxrays\kernels\utils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Generating D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
echo #include ^&lt;string^&gt; &gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo namespace luxrays { namespace ocl { &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
echo std::string KernelSource_utils_funcs = &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
for /F "usebackq tokens=*" %%a in ( D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl ) do if "%%a"=="" ( echo "\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp ) else (
if %errorlevel% neq 0 goto :cmEnd
set line=%%a
if %errorlevel% neq 0 goto :cmEnd
setlocal ENABLEDELAYEDEXPANSION
if %errorlevel% neq 0 goto :cmEnd
set line=!line:\=\\!
if %errorlevel% neq 0 goto :cmEnd
set line=!line:"=\"!
if %errorlevel% neq 0 goto :cmEnd
echo "!line!\n" &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
endlocal
if %errorlevel% neq 0 goto :cmEnd
)
if %errorlevel% neq 0 goto :cmEnd
echo ; } } &gt;&gt; D:/luxrender/luxrays/src/luxrays/kernels/utils_funcs_kernel.cpp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:/luxrender/luxrays/include/luxrays/core/utils_funcs.cl;D:\luxrender\luxrays\include\luxrays\core\utils_funcs.cl;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">D:\luxrender\luxrays\src\luxrays\kernels\utils_funcs_kernel.cpp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\accelerators\bvhaccel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\accelerators\embreeaccel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\accelerators\mqbvhaccel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\accelerators\qbvhaccel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\accelerators\mbvhaccel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\color.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spd.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\blackbodyspd.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\equalspd.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\frequencyspd.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\gaussianspd.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\irregular.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\regular.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\rgbillum.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spds\rgbrefl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\spectrumwavelengths.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\color\swcspectrum.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\accelerator.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\context.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\dataset.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\device.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\epsilon.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\exttrianglemesh.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\trianglemesh.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\geometry\bbox.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\geometry\matrix4x4.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\geometry\motionsystem.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\geometry\quaternion.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\core\geometry\transform.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\idevices\openclidevice.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\idevices\nativeidevice.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\idevices\virtualidevice.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\utils\mc.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\utils\ocl.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\utils\ply\rply.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\utils\properties.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\luxrays_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\bvh_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\bvh_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\mbvh_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\qbvh_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\qbvh_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\mqbvh_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\randomgen_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\randomgen_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\trianglemesh_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\matrix4x4_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\transform_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\transform_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\frame_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\frame_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\epsilon_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\epsilon_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\ray_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\ray_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\point_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\vector_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\vector_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\normal_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\quaternion_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\quaternion_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\bbox_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\bbox_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\motionsystem_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\triangle_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\triangle_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\color_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\color_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\uv_types_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\mc_funcs_kernel.cpp" />
    <ClCompile Include="D:\luxrender\luxrays\src\luxrays\kernels\utils_funcs_kernel.cpp" />
  </ItemGroup>
  <ItemGroup>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>