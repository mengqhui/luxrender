#include <string> 
namespace slg { namespace ocl { 
std::string KernelSource_texture_fresnelcolor_funcs = 
"#line 2 \"texture_fresnelcolor.cl\"\n" 
"/***************************************************************************\n" 
"* Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n" 
"*                                                                         *\n" 
"*   This file is part of LuxRender.                                       *\n" 
"*                                                                         *\n" 
"* Licensed under the Apache License, Version 2.0 (the \"License\");         *\n" 
"* you may not use this file except in compliance with the License.        *\n" 
"* You may obtain a copy of the License at                                 *\n" 
"*                                                                         *\n" 
"*     http://www.apache.org/licenses/LICENSE-2.0                          *\n" 
"*                                                                         *\n" 
"* Unless required by applicable law or agreed to in writing, software     *\n" 
"* distributed under the License is distributed on an \"AS IS\" BASIS,       *\n" 
"* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n" 
"* See the License for the specific language governing permissions and     *\n" 
"* limitations under the License.                                          *\n" 
"***************************************************************************/\n" 
"float FresnelApproxN(const float Fr) {\n" 
"const float sqrtReflectance = sqrt(clamp(Fr, 0.f, .999f));\n" 
"return (1.f + sqrtReflectance) /\n" 
"(1.f - sqrtReflectance);\n" 
"}\n" 
"float3 FresnelApproxN3(const float3 Fr) {\n" 
"const float3 sqrtReflectance = Spectrum_Sqrt(clamp(Fr, 0.f, .999f));\n" 
"return (WHITE + sqrtReflectance) /\n" 
"(WHITE - sqrtReflectance);\n" 
"}\n" 
"float FresnelApproxK(const float Fr) {\n" 
"const float reflectance = clamp(Fr, 0.f, .999f);\n" 
"return 2.f * sqrt(reflectance /\n" 
"(1.f - reflectance));\n" 
"}\n" 
"float3 FresnelApproxK3(const float3 Fr) {\n" 
"const float3 reflectance = clamp(Fr, 0.f, .999f);\n" 
"return 2.f * Spectrum_Sqrt(reflectance /\n" 
"(WHITE - reflectance));\n" 
"}\n" 
"//------------------------------------------------------------------------------\n" 
"// FresnelColor texture\n" 
"//------------------------------------------------------------------------------\n" 
"#if defined(PARAM_ENABLE_TEX_FRESNELCOLOR)\n" 
"// The following functions are never really used as Metal material has special\n" 
"// code to evaluate Fresnel texture\n" 
"float FresnelColorTexture_ConstEvaluateFloat(__global const Texture *tex) {\n" 
"return 0.f;\n" 
"}\n" 
"float3 FresnelColorTexture_ConstEvaluateSpectrum(__global const Texture *tex) {\n" 
"return 0.f;\n" 
"}\n" 
"#endif\n" 
; } } 
